#include<stdio.h>
#include<stdlib.h>

#define MAX_STATES 100

int n;
int m;
int transitions[MAX_STATES][MAX_STATES][MAX_STATES]; // NFA transitions

void epsilonClosure(int state, int closure[]) {
    int stack[MAX_STATES];
    int top = -1;
    int visited[MAX_STATES] = {0};

    stack[++top] = state;
    closure[state] = 1;

    while (top != -1) {
        int current = stack[top--];

        for (int i = 0; i < n; i++) {
            if (transitions[current][m][i] && !visited[i]) {
                stack[++top] = i;
                closure[i] = 1;
                visited[i] = 1;
            }
        }
    }
}

int main() {
    printf("Enter the number of states: ");
    scanf("%d", &n);

    printf("Enter the number of symbols (excluding ε): ");
    scanf("%d", &m);

    printf("Enter the transition table:\n");

    for (int i = 0; i < n; i++) {
        for (int j = 0; j <= m; j++) {
            for (int k = 0; k < n; k++) {
                printf("δ(q%d, ", i);
                if (j == m) {
                    printf("ε) = q%d: ", k);
                } else {
                    printf("%c) = q%d: ", 'a' + j, k);
                }
                scanf("%d", &transitions[i][j][k]);
            }
        }
    }

    for (int i = 0; i < n; i++) {
        int closure[MAX_STATES] = {0};
        epsilonClosure(i, closure);

        printf("ε-closure(q%d) = {", i);
        for (int j = 0; j < n; j++) {
            if (closure[j]) {
                printf("q%d", j);
                if (j != n - 1) {
                    printf(", ");
                }
            }
        }
        printf("}\n");
    }

    return 0;
}
